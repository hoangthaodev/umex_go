// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tb_users.sql

package database

import (
	"context"
)

const getUserByEmail = `-- name: GetUserByEmail :one
select usr_email, usr_id from ` + "`" + `tb_users` + "`" + ` where usr_email = ? limit 1
`

type GetUserByEmailRow struct {
	UsrEmail string
	UsrID    uint32
}

func (q *Queries) GetUserByEmail(ctx context.Context, usrEmail string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, usrEmail)
	var i GetUserByEmailRow
	err := row.Scan(&i.UsrEmail, &i.UsrID)
	return i, err
}

const updateUserStatusByUserId = `-- name: UpdateUserStatusByUserId :exec
update ` + "`" + `tb_users` + "`" + ` 
set 
    usr_status = ?,
    usr_updated_at = ?
where usr_id = ?
`

type UpdateUserStatusByUserIdParams struct {
	UsrStatus    bool
	UsrUpdatedAt int32
	UsrID        uint32
}

func (q *Queries) UpdateUserStatusByUserId(ctx context.Context, arg UpdateUserStatusByUserIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserStatusByUserId, arg.UsrStatus, arg.UsrUpdatedAt, arg.UsrID)
	return err
}
